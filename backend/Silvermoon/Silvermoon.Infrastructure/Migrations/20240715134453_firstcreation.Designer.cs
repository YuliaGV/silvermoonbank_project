// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Silvermoon.Infrastructure.Data;

#nullable disable

namespace Silvermoon.Infrastructure.Migrations
{
    [DbContext(typeof(SilvermoonContext))]
    [Migration("20240715134453_firstcreation")]
    partial class firstcreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Silvermoon.Core.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AccountId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("card_id");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("available_balance");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("card_number");

                    b.Property<int>("CardType")
                        .HasColumnType("int")
                        .HasColumnName("cardtype");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("credit_limit");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("expiration_date");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issue_date");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("security_code");

                    b.Property<int>("StatusCard")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("AccountId");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.FinancialTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.HasKey("TransactionId");

                    b.ToTable("financial_transactions");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.TransferDetail", b =>
                {
                    b.Property<int>("TransferDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tranfer_details_id");

                    b.Property<string>("FromAccount")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("from_account");

                    b.Property<string>("ToAccount")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("to_account");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.HasKey("TransferDetailsId");

                    b.HasIndex("TransactionId");

                    b.ToTable("transfer_details");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.Account", b =>
                {
                    b.HasOne("Silvermoon.Core.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("Silvermoon.Core.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.Card", b =>
                {
                    b.HasOne("Silvermoon.Core.Entities.Account", "Account")
                        .WithMany("Cards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.TransferDetail", b =>
                {
                    b.HasOne("Silvermoon.Core.Entities.FinancialTransaction", "FinancialTransaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinancialTransaction");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.Account", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Silvermoon.Core.Entities.User", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
